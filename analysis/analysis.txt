Mariana Tandon
mst29

Questions here will come from the assignment
writeup. Be sure to copy paste questions and 
your explanations before you push to GitHub and
do that before uploading to Gradescope

StringBuilderStrand:
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.026	1290
StringBuilderStrand:	            512	      4,965,591	0.020	1290
StringBuilderStrand:	          1,024	      5,295,831	0.007	1290
StringBuilderStrand:	          2,048	      5,956,311	0.007	1290
StringBuilderStrand:	          4,096	      7,277,271	0.008	1290
StringBuilderStrand:	          8,192	      9,919,191	0.008	1290
StringBuilderStrand:	         16,384	     15,203,031	0.012	1290
StringBuilderStrand:	         32,768	     25,770,711	0.019	1290
StringBuilderStrand:	         65,536	     46,906,071	0.035	1290
StringBuilderStrand:	        131,072	     89,176,791	0.074	1290
StringBuilderStrand:	        262,144	    173,718,231	0.191	1290
StringBuilderStrand:	        524,288	    342,801,111	0.266	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at StringBuilderStrand.append(StringBuilderStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)
	
StringStrand:
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.422	1290
StringStrand:	            512	      4,965,591	0.414	1290
StringStrand:	          1,024	      5,295,831	0.424	1290
StringStrand:	          2,048	      5,956,311	0.476	1290
StringStrand:	          4,096	      7,277,271	0.597	1290
StringStrand:	          8,192	      9,919,191	0.825	1290
StringStrand:	         16,384	     15,203,031	1.288	1290
StringStrand:	         32,768	     25,770,711	2.262	1290
StringStrand:	         65,536	     46,906,071	4.887	1290
StringStrand:	        131,072	     89,176,791	11.201	1290
StringStrand:	        262,144	    173,718,231	21.405	1290
StringStrand:	        524,288	    342,801,111	40.046	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at StringStrand.append(StringStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.lambda$0(DNABenchmark.java:76)
	at DNABenchmark$$Lambda$179/78204644.run(Unknown Source)
	at java.base/java.lang.Thread.run(Thread.java:844)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:79)
	at DNABenchmark.main(DNABenchmark.java:113)
	
LinkStrand:
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.024	1290
LinkStrand:	            512	      4,965,591	0.018	1290
LinkStrand:	          1,024	      5,295,831	0.004	1290
LinkStrand:	          2,048	      5,956,311	0.005	1290
LinkStrand:	          4,096	      7,277,271	0.004	1290
LinkStrand:	          8,192	      9,919,191	0.004	1290
LinkStrand:	         16,384	     15,203,031	0.003	1290
LinkStrand:	         32,768	     25,770,711	0.005	1290
LinkStrand:	         65,536	     46,906,071	0.004	1290
LinkStrand:	        131,072	     89,176,791	0.004	1290
LinkStrand:	        262,144	    173,718,231	0.005	1290
LinkStrand:	        524,288	    342,801,111	0.006	1290
LinkStrand:	      1,048,576	    680,966,871	0.005	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.004	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.005	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.006	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.005	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.005	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.007	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.006	1290
LinkStrand:	    268,435,456	173,145,504,471	0.008	1290
LinkStrand:	    536,870,912	346,286,373,591	0.005	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at DNABenchmark.main(DNABenchmark.java:110)
	
Question 1: are the benchmark timings for StringStrand consistent with the explanation below that the time to execute cutAndSplice is O(b2S)? 
Note that the value of b is half the number of calls to append since each cut (except the first) is modeled by two calls of append in the method cutAndSplice -- see the code. 
This means that b2 will be constant in the benchmark, but S will vary. 

Yes! Because b2 is constant in the benchmark, the runtimes vary at the same rate as S, or the length of the splice... 
Since S double each time, we would expect the runtimes to double each time as well. Although they seem pretty consistent in the beginning, 
they clearly start double when S gets very big. For example, from S=16,384 onward (doubling each time) the runtimes also follow a
doubling trend as they go from 1.288 to 2.262 to 4.887 to 11.201 to 21.405 to 40.046, which is very close to doubling each time and following the 
pattern of S, aka following the pattern of b2s because b2 is constant here. 


Question 2: are the benchmark timings for StringBuilderStrand consistent with the explanation below that the time to execute cutAndSplice is O(bS)? 
Note that the value of b is half the number of calls to append since each cut (except the first) is modeled by two calls of append in the method cutAndSplice -- see the code. 
This means that b will be constant in the benchmark, but S will vary. 

Semi! because b is constant in the benchmark, the runtimes should vary at the same rate as S, or the lenght of the splices.
This trend is not really followed in the beginning because the times are so small that all of the runtimes seem fairly similar. 
however, as with StringStrand when the values of S get larger, the runtimes follow this doubling trend more closely, although
it is still not quite there. For example, from S= 65,536 onward (doubling each time), the times go from 0.035 to 0.074 to 0.191 to 0.266
which is fairly close to doubling each time, but not quite. 


Question 3: Explain why the time for LinkStrand does not change much at all over all the runs in the benchmark program. 
Explain why you think memory is exhausted at the specific strand size you see in your timings -- as compared to exhaustion for String and StringBuilder.

because the LinkStrand uses linkedlists, the runtime is much faster and the times do not change much at all over all the runs in the 
benchmark program because it enables the cut and splice to run in constant time because it can now reuse the strings and just point the same node over and 
over again when a certain sequence needs to be referenced in the strand. THe LinkedList runtime ends up just being B+N!

the memory is exhausted after S= 536,870,912, whereas in StringStrand and StringBuilder it exhausts at S= 524,288...
LinkStrand's limit is nearly ten times as high as the limits of the other two, because it reuses sections of the strand 
that are repeated throughout it whereas in StringBuilder and StringStrand must rewrite that segment. For String/StringBuilder, the memory is B*S +N
and LinkedList is just S+N because B(reoccurrences) is reused....S= size of splice, N=strand size



